name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libspatialindex-dev
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        run: |
          poetry install
      - name: Run linter
        run: |
          poetry run make lint

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libspatialindex-dev
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        run: |
          poetry install
      - name: Check formatting
        run: |
          poetry run ruff format --check o2 o2_server

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libspatialindex-dev
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        run: |
          poetry install
      - name: Run type checker
        run: |
          poetry run make typecheck

  spellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install cspell
        run: |
          npm install -g cspell
      - name: Run spell checker
        run: |
          make spell-check

  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libspatialindex-dev
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        run: |
          poetry install

      # Create directory outside the repository for coverage reports
      - name: Create coverage directory
        run: |
          mkdir -p /tmp/coverage-reports/html
          mkdir -p /tmp/coverage-reports/badges

      # Run tests with coverage (continue even if tests fail)
      - name: Run tests with coverage
        run: |
          poetry run python -m pytest --cov=o2 --cov-report=xml:/tmp/coverage-reports/coverage.xml --cov-report=html:/tmp/coverage-reports/html || true

      # Generate the coverage badge (even if tests failed)
      - name: Generate coverage badge
        run: |
          if [ -f /tmp/coverage-reports/coverage.xml ]; then
            COVERAGE=$(python -c "import xml.etree.ElementTree as ET; print('{:.2f}%'.format(float(ET.parse('/tmp/coverage-reports/coverage.xml').getroot().attrib['line-rate']) * 100))")
            COLOR=$(python -c "import xml.etree.ElementTree as ET; rate = float(ET.parse('/tmp/coverage-reports/coverage.xml').getroot().attrib['line-rate']); print('red' if rate < 0.5 else 'yellow' if rate < 0.75 else 'green')")
          else
            COVERAGE="0.00%"
            COLOR="red"
          fi

          # Create badge with actual values instead of variables
          cat > /tmp/coverage-reports/badges/coverage.svg << EOF
          <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="96" height="20" role="img" aria-label="coverage: $COVERAGE">
            <title>coverage: $COVERAGE</title>
            <linearGradient id="s" x2="0" y2="100%">
              <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
              <stop offset="1" stop-opacity=".1"/>
            </linearGradient>
            <clipPath id="r">
              <rect width="96" height="20" rx="3" fill="#fff"/>
            </clipPath>
            <g clip-path="url(#r)">
              <rect width="61" height="20" fill="#555"/>
              <rect x="61" width="35" height="20" fill="#$COLOR"/>
              <rect width="96" height="20" fill="url(#s)"/>
            </g>
            <g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110">
              <text aria-hidden="true" x="315" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="510">coverage</text>
              <text x="315" y="140" transform="scale(.1)" fill="#fff" textLength="510">coverage</text>
              <text aria-hidden="true" x="775" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="250">$COVERAGE</text>
              <text x="775" y="140" transform="scale(.1)" fill="#fff" textLength="250">$COVERAGE</text>
            </g>
          </svg>
          EOF

      # Show directory contents for debugging
      - name: Debug directory contents
        run: |
          echo "Contents of /tmp/coverage-reports:"
          ls -la /tmp/coverage-reports
          echo "Contents of /tmp/coverage-reports/html:"
          ls -la /tmp/coverage-reports/html || echo "HTML directory empty"
          echo "Contents of /tmp/coverage-reports/badges:"
          ls -la /tmp/coverage-reports/badges || echo "Badges directory empty"

      # Save coverage report as an artifact
      - name: Save coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: /tmp/coverage-reports
          retention-days: 7

      # If main branch, deploy to GitHub Pages
      - name: Deploy coverage report to GitHub Pages
        if: github.ref == 'refs/heads/main'
        run: |
          # Move HTML report to root of deployment
          cp -r /tmp/coverage-reports/html/* /tmp/coverage-reports/
          # Keep badges directory
          mkdir -p /tmp/coverage-reports/badges
          cp /tmp/coverage-reports/badges/coverage.svg /tmp/coverage-reports/badges/
          # Keep coverage.xml
          cp /tmp/coverage-reports/coverage.xml /tmp/coverage-reports/

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: /tmp/coverage-reports
          branch: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}
          clean: true
          commit-message: "Update coverage report [skip ci]"
